// File: led_digits_scroll.v
// Generated by MyHDL 0.11.43
// Date: Sun Mar  3 22:55:39 2024


`timescale 1ns/10ps

module led_digits_scroll (
    d0_o,
    d1_o,
    d2_o,
    d3_o,
    d4_o,
    d5_o,
    d6_o,
    d7_o,
    clk_i
);
// Example design for scrolling pattern across LED digits.
// d0_o, ... d7_o: 3-state outputs to drive the StickIt! LEDDigits board.
// clk_i: Input clock.
// enable_ascii_to_7seg: Set True to interpret input digits as ASCII.
// freq_g: Set to frequency of input clock.

output d0_o;
wire d0_o;
output d1_o;
wire d1_o;
output d2_o;
wire d2_o;
output d3_o;
wire d3_o;
output d4_o;
wire d4_o;
output d5_o;
wire d5_o;
output d6_o;
wire d6_o;
output d7_o;
wire d7_o;
input clk_i;

reg [63:0] charstring;
reg [26:0] cntr;
reg initialized;
wire [55:0] disp_digit_all_i;
reg [7:0] disp_digit_shf;
reg disp_initialized;
reg [6:0] disp_seg_mask;
reg [2:0] disp_seg_cntr;
reg disp_blank;
reg [9:0] disp_seg_timer;
reg [6:0] disp_active_digit;
wire [6:0] disp_segments;
wire [6:0] disp_active_segments;
reg [7:0] disp_drvr_enbls;
wire drvrs [0:8-1];

assign disp_digit_all_i = 56'd0;
assign drvrs[0] = disp_inst_0_o_drvr;
assign drvrs[1] = disp_inst_1_o_drvr;
assign drvrs[2] = disp_inst_2_o_drvr;
assign drvrs[3] = disp_inst_3_o_drvr;
assign drvrs[4] = disp_inst_4_o_drvr;
assign drvrs[5] = disp_inst_5_o_drvr;
assign drvrs[6] = disp_inst_6_o_drvr;
assign drvrs[7] = disp_inst_7_o_drvr;


always @(posedge clk_i) begin: LED_DIGITS_SCROLL_CNTR_LOGIC
    if ((initialized == 1'b0)) begin
        initialized <= (!initialized);
        charstring <= 60'h706050403020120;
    end
    else if ((cntr == 0)) begin
        cntr <= (100000000 - 1);
        charstring[64-1:8] <= charstring[56-1:0];
        charstring[8-1:0] <= charstring[64-1:56];
    end
    else begin
        cntr <= (cntr - 1);
    end
end


always @(disp_digit_shf[0], disp_drvr_enbls[0]) begin: LED_DIGITS_SCROLL_DISP_INST_0_DRVR_LOGIC
    if ((disp_drvr_enbls[0] == 1)) begin
        disp_inst_0_o_drvr = disp_digit_shf[0];
    end
    else begin
        disp_inst_0_o_drvr = 'bz;
    end
end



assign disp_inst_0_dummy = (drvrs[0] != 0);


always @(disp_digit_shf[1], disp_drvr_enbls[1]) begin: LED_DIGITS_SCROLL_DISP_INST_1_DRVR_LOGIC
    if ((disp_drvr_enbls[1] == 1)) begin
        disp_inst_1_o_drvr = disp_digit_shf[1];
    end
    else begin
        disp_inst_1_o_drvr = 'bz;
    end
end



assign disp_inst_1_dummy = (drvrs[1] != 0);


always @(disp_digit_shf[2], disp_drvr_enbls[2]) begin: LED_DIGITS_SCROLL_DISP_INST_2_DRVR_LOGIC
    if ((disp_drvr_enbls[2] == 1)) begin
        disp_inst_2_o_drvr = disp_digit_shf[2];
    end
    else begin
        disp_inst_2_o_drvr = 'bz;
    end
end



assign disp_inst_2_dummy = (drvrs[2] != 0);


always @(disp_digit_shf[3], disp_drvr_enbls[3]) begin: LED_DIGITS_SCROLL_DISP_INST_3_DRVR_LOGIC
    if ((disp_drvr_enbls[3] == 1)) begin
        disp_inst_3_o_drvr = disp_digit_shf[3];
    end
    else begin
        disp_inst_3_o_drvr = 'bz;
    end
end



assign disp_inst_3_dummy = (drvrs[3] != 0);


always @(disp_digit_shf[4], disp_drvr_enbls[4]) begin: LED_DIGITS_SCROLL_DISP_INST_4_DRVR_LOGIC
    if ((disp_drvr_enbls[4] == 1)) begin
        disp_inst_4_o_drvr = disp_digit_shf[4];
    end
    else begin
        disp_inst_4_o_drvr = 'bz;
    end
end



assign disp_inst_4_dummy = (drvrs[4] != 0);


always @(disp_digit_shf[5], disp_drvr_enbls[5]) begin: LED_DIGITS_SCROLL_DISP_INST_5_DRVR_LOGIC
    if ((disp_drvr_enbls[5] == 1)) begin
        disp_inst_5_o_drvr = disp_digit_shf[5];
    end
    else begin
        disp_inst_5_o_drvr = 'bz;
    end
end



assign disp_inst_5_dummy = (drvrs[5] != 0);


always @(disp_digit_shf[6], disp_drvr_enbls[6]) begin: LED_DIGITS_SCROLL_DISP_INST_6_DRVR_LOGIC
    if ((disp_drvr_enbls[6] == 1)) begin
        disp_inst_6_o_drvr = disp_digit_shf[6];
    end
    else begin
        disp_inst_6_o_drvr = 'bz;
    end
end



assign disp_inst_6_dummy = (drvrs[6] != 0);


always @(disp_digit_shf[7], disp_drvr_enbls[7]) begin: LED_DIGITS_SCROLL_DISP_INST_7_DRVR_LOGIC
    if ((disp_drvr_enbls[7] == 1)) begin
        disp_inst_7_o_drvr = disp_digit_shf[7];
    end
    else begin
        disp_inst_7_o_drvr = 'bz;
    end
end



assign disp_inst_7_dummy = (drvrs[7] != 0);


always @(posedge clk_i) begin: LED_DIGITS_SCROLL_DISP_SCAN_SEGMENTS_AND_DIGITS
    if ((disp_initialized != 1'b1)) begin
        disp_seg_mask <= 7'b0010101;
        disp_digit_shf <= 8'b00000001;
        disp_initialized <= (!disp_initialized);
    end
    else if ((disp_seg_timer == 0)) begin
        disp_seg_timer <= (597 - 1);
        disp_seg_mask[7-1:1] <= disp_seg_mask[6-1:0];
        disp_seg_mask[0] <= disp_seg_mask[6];
        disp_blank <= (disp_seg_cntr == 1);
        if ((disp_seg_cntr == 0)) begin
            disp_digit_shf[8-1:1] <= disp_digit_shf[7-1:0];
            disp_digit_shf[0] <= disp_digit_shf[7];
            disp_seg_cntr <= (7 - 1);
        end
        else begin
            disp_seg_cntr <= (disp_seg_cntr - 1);
        end
    end
    else begin
        disp_seg_timer <= (disp_seg_timer - 1);
    end
end


always @(charstring[32-1:24], disp_digit_all_i, charstring[8-1:0], charstring[40-1:32], charstring[16-1:8], charstring[48-1:40], charstring[24-1:16], charstring[56-1:48], disp_digit_shf, charstring[64-1:56]) begin: LED_DIGITS_SCROLL_DISP_GET_ACTIVE_DIGIT
    if ((disp_digit_shf[0] == 1)) begin
        disp_active_digit = (charstring[8-1:0] | disp_digit_all_i[7-1:0]);
    end
    else if ((disp_digit_shf[1] == 1)) begin
        disp_active_digit = (charstring[16-1:8] | disp_digit_all_i[14-1:7]);
    end
    else if ((disp_digit_shf[2] == 1)) begin
        disp_active_digit = (charstring[24-1:16] | disp_digit_all_i[21-1:14]);
    end
    else if ((disp_digit_shf[3] == 1)) begin
        disp_active_digit = (charstring[32-1:24] | disp_digit_all_i[28-1:21]);
    end
    else if ((disp_digit_shf[4] == 1)) begin
        disp_active_digit = (charstring[40-1:32] | disp_digit_all_i[35-1:28]);
    end
    else if ((disp_digit_shf[5] == 1)) begin
        disp_active_digit = (charstring[48-1:40] | disp_digit_all_i[42-1:35]);
    end
    else if ((disp_digit_shf[6] == 1)) begin
        disp_active_digit = (charstring[56-1:48] | disp_digit_all_i[49-1:42]);
    end
    else if ((disp_digit_shf[7] == 1)) begin
        disp_active_digit = (charstring[64-1:56] | disp_digit_all_i[56-1:49]);
    end
    else begin
        disp_active_digit = 0;
    end
end



assign disp_segments = disp_active_digit;



assign disp_active_segments = (disp_segments & disp_seg_mask);


always @(disp_blank, disp_active_segments, disp_digit_shf) begin: LED_DIGITS_SCROLL_DISP_COMBINE_DRIVERS
    if ((disp_blank == 1'b1)) begin
        disp_drvr_enbls = 0;
    end
    else if ((disp_digit_shf[0] == 1)) begin
        disp_drvr_enbls[8-1:1] = disp_active_segments[7-1:0];
        disp_drvr_enbls[0] = 1;
    end
    else if ((disp_digit_shf[1] == 1)) begin
        disp_drvr_enbls[8-1:2] = disp_active_segments[7-1:1];
        disp_drvr_enbls[1] = 1;
        disp_drvr_enbls[0] = disp_active_segments[1-1:0];
    end
    else if ((disp_digit_shf[2] == 1)) begin
        disp_drvr_enbls[8-1:3] = disp_active_segments[7-1:2];
        disp_drvr_enbls[2] = 1;
        disp_drvr_enbls[2-1:0] = disp_active_segments[2-1:0];
    end
    else if ((disp_digit_shf[3] == 1)) begin
        disp_drvr_enbls[8-1:4] = disp_active_segments[7-1:3];
        disp_drvr_enbls[3] = 1;
        disp_drvr_enbls[3-1:0] = disp_active_segments[3-1:0];
    end
    else if ((disp_digit_shf[4] == 1)) begin
        disp_drvr_enbls[8-1:5] = disp_active_segments[7-1:4];
        disp_drvr_enbls[4] = 1;
        disp_drvr_enbls[4-1:0] = disp_active_segments[4-1:0];
    end
    else if ((disp_digit_shf[5] == 1)) begin
        disp_drvr_enbls[8-1:6] = disp_active_segments[7-1:5];
        disp_drvr_enbls[5] = 1;
        disp_drvr_enbls[5-1:0] = disp_active_segments[5-1:0];
    end
    else if ((disp_digit_shf[6] == 1)) begin
        disp_drvr_enbls[8-1:7] = disp_active_segments[7-1:6];
        disp_drvr_enbls[6] = 1;
        disp_drvr_enbls[6-1:0] = disp_active_segments[6-1:0];
    end
    else if ((disp_digit_shf[7] == 1)) begin
        disp_drvr_enbls[7] = 1;
        disp_drvr_enbls[7-1:0] = disp_active_segments[7-1:0];
    end
    else begin
        disp_drvr_enbls = 0;
    end
end



assign d0_o = drvrs[0];
assign d1_o = drvrs[1];
assign d2_o = drvrs[2];
assign d3_o = drvrs[3];
assign d4_o = drvrs[4];
assign d5_o = drvrs[5];
assign d6_o = drvrs[6];
assign d7_o = drvrs[7];

endmodule
